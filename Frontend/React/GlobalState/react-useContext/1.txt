1. globalstate 관리 - useContext

1. useContext는 React Hooks 중 하나로, React의 Context API를 사용하여 컴포넌트 간에 데이터를 공유할 때 유용하게 사용됩니다. 
# useContext Hook을 사용하면 Provider로 전달된 값을 해당 컴포넌트에서 손쉽게 사용할 수 있습니다.

1. useContext는 Context 객체를 받아 해당 객체의 Provider에 전달된 값을 가져옵니다. 
# 이 때, React 컴포넌트 트리에서 상위에서 하위 컴포넌트로 데이터를 전달하는 방식과 달리, Context API를 사용하면 데이터를 상위 컴포넌트로부터 직접적으로 전달받지 않아도 됩니다.

아래는 useContext를 사용한 예시입니다.

//
1. context라는 파일을 만든다 

1. UserContext.js  / ThemeContext.js 파일을 만든다
$ import { createContext } from "react"
$ export const UserContext = createContext(null) //UserContext.js파일 
$ export const ThemeContext = createContext //ThemeContext.js파일 

1. app.js로가서 적용시킬 component에 provider적용시키기

import "./App.css"
import { useState } from "react"
import Page from "./components/Page"
import { ThemeContext } from "./context/ThemeContext"
import { UserContext } from "./context/UserContext"

function App() {
  const [isDark, setIsDark] = useState(false)

  return (
    <UserContext.Provider value={"사용자"}> *** 중요한거는 value={}를쳐서 넣어야함
      <ThemeContext.Provider value={{ isDark, setIsDark }}>
        <Page />
      </ThemeContext.Provider>
    </UserContext.Provider>
  )
}

export default App

1. page.jsx 로가서 
import React,{useCotnext} from "react"
import {ThemeContext} from '../context/ThemeContext' 
import {UserContext} from '../context/UserContext' 
export default function Page() {
  const user = useContext(UserContext)
  const {isDark,setIsDark} = useContext(ThemeContext)
  return (
    <div className="page" style={{ backgroundColor: isDark ? "black" : "lightgray" }}>
      <button className="button" onClick={toggleTheme}>
      Dark Mode
      </button>
        안녕{user}
    </div>
  )
}

