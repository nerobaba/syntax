## Axios 설치하기

Axios는 npm을 통해 설치할 수 있습니다. 다음 명령어를 사용하여 설치할 수 있습니다.

```
npm install axios

```

## Axios 사용하기

Axios를 사용하기 위해서는 우선 해당 모듈을 import해야 합니다.

```
import axios from 'axios';

```

### GET 요청

Axios를 사용하여 GET 요청을 보내는 방법은 다음과 같습니다.

```
useEffect(() => {
    axios.get(URL).then((response) => {
      setState(response.data);
    });
  }, []);

```

### POST 요청

Axios를 사용하여 POST 요청을 보내는 방법은 다음과 같습니다.

```
axios.post('URL', {data})
  .then(response => {
    console.log(response.data);
  })
  .catch(error => {
    console.log(error);
  })

```

### 기타 요청

Axios를 사용하여 PUT, DELETE 등의 요청을 보내는 방법은 다음과 같습니다.

```
axios.put('URL', {data})
axios.delete('URL')

```

## Axios 설정하기

Axios는 기본적으로 다음과 같은 설정값을 가지고 있습니다.

```
{
  baseURL: '<http://localhost:3000>',
  timeout: 1000,
  headers: {'X-Custom-Header': 'value'}
}

```

이 설정값은 Axios 인스턴스를 생성할 때 변경할 수 있습니다.

```
const instance = axios.create({
  baseURL: '<http://localhost:5000>',
  timeout: 2000,
  headers: {'X-Custom-Header': 'value'}
});

```

이렇게 생성한 Axios 인스턴스는 다른 Axios 인스턴스와 독립적으로 동작합니다.

### Axios 인터셉터

Axios는 인터셉터를 사용하여 요청과 응답을 가로챌 수 있습니다. 인터셉터는 요청이나 응답을 보내기 전에 수정하거나 로그를 남기는 등의 작업을 처리할 수 있습니다.

### 요청 인터셉터

요청 인터셉터는 Axios 요청을 보내기 전에 실행됩니다. 다음은 요청 인터셉터를 설정하는 방법입니다.

```
axios.interceptors.request.use(
  (config) => {
    // 요청에 대한 설정을 추가합니다.
    return config;
  },
  (error) => {
    // 요청에 대한 오류 처리를 합니다.
    return Promise.reject(error);
  }
);

```

### 응답 인터셉터

응답 인터셉터는 Axios 응답을 받은 후 실행됩니다. 다음은 응답 인터셉터를 설정하는 방법입니다.

```
axios.interceptors.response.use(
  (response) => {
    // 응답에 대한 처리를 수행합니다.
    return response;
  },
  (error) => {
    // 응답에 대한 오류 처리를 합니다.
    return Promise.reject(error);
  }
);

```

## 예외 처리하기

Axios를 사용하여 서버와 통신할 때 예외 처리는 매우 중요합니다. Axios는 Promise 기반으로 동작하기 때문에 예외 처리를 하지 않으면 예상치 못한 오류가 발생할 수 있습니다.

다음은 Axios 예외 처리의 예입니다.

```
axios.get('URL')
  .then(response => {
    console.log(response.data);
  })
  .catch(error => {
    if (error.response) {
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      console.log(error.request);
    } else {
      console.log('Error', error.message);
    }
    console.log(error.config);
  });

```